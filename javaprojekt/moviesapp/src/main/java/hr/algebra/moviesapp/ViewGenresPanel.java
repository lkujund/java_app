/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.moviesapp;

import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.sql.SqlGenreRepo;
import hr.algebra.model.Genre;
import hr.algebra.moviesapp.model.GenreTableModel;
import hr.algebra.utilities.MessageUtils;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Luka
 */
public class ViewGenresPanel extends javax.swing.JPanel {
    private SqlGenreRepo genreRepo;
    private Genre selectedGenre;
    private List<Genre> genres;
    private GenreTableModel genreTableModel = new GenreTableModel();
    /**
     * Creates new form EditGenresPanel
     */
    public ViewGenresPanel() {
        initComponents();
        init();
        getRepo();
        try {
            fetchGenres();
        } catch (Exception ex) {
            Logger.getLogger(ViewGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGenres = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbNameError = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel3.setText("GENRES:");

        tblGenres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGenresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblGenres);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(java.awt.Color.red);
        btnDelete.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        btnDelete.setText("X");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbNameError.setForeground(java.awt.Color.red);
        lbNameError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnEdit)
                        .addComponent(btnDelete))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    
            if (!formValid()) {
                return;
            }
        if (selectedGenre != null) {
            new Thread(() -> {
                try {
                    selectedGenre.setName(tfName.getText().trim());
                    genreRepo.updateOne(selectedGenre.getId(), selectedGenre);
                    fetchGenres();
                } catch (Exception ex) {
                    Logger.getLogger(ViewGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
                } 
            }).start();

        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        tblGenres.clearSelection();
        selectedGenre = null;
        tfName.setText("");
    }//GEN-LAST:event_formMouseClicked

    private void tblGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGenresMouseClicked
        clearForm();
        new Thread(() ->
        {
            int selectedRow = tblGenres.getSelectedRow();
            int rowIndex = tblGenres.convertRowIndexToModel(selectedRow);
            int selectedActorId = (int) genreTableModel.getValueAt(rowIndex, 0);

            try {
                Optional<Genre> optPerson = genreRepo.selectOne(selectedActorId);

                if (optPerson.isPresent()) {
                    selectedGenre = optPerson.get();
                    fillForm(selectedGenre);
                }
            } catch (Exception ex) {
                Logger.getLogger(ViewGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to show article!");
            }
        }).start();
    }//GEN-LAST:event_tblGenresMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!formValid()) {
            return;
        }
        

            Genre genre = new Genre(
                    tfName.getText().trim()
            );
            
            new Thread(()
                    -> {
                try {
                    genreRepo.createOne(genre);
                    fetchGenres();
                } catch (Exception ex) {
                    Logger.getLogger(ViewGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
            clearForm();
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedGenre != null) {
            new Thread(()
                    -> {
                try {
                    genreRepo.deleteOne(selectedGenre.getId());
                    fetchGenres();
                } catch (Exception ex) {
                    Logger.getLogger(ViewDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();

        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbNameError;
    private javax.swing.JTable tblGenres;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables

    private void init() {
        lbNameError.setVisible(false);
    }

    private void getRepo() {
        genreRepo = (SqlGenreRepo) RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.GENRE_REPO);

    }

    private void fetchGenres() {
        try {
            tblGenres.removeAll();
            genres = genreRepo.selectMany().stream().distinct().collect(Collectors.toList());;
            genreTableModel.setGenres(genres);
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(ViewGenresPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initTable() {
        tblGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblGenres.setAutoCreateRowSorter(true);
        tblGenres.setRowHeight(25);
        tblGenres.setModel(genreTableModel);
        tblGenres.setAutoCreateRowSorter(true);
    }

    private void clearForm() {
        lbNameError.setVisible(false);
        tfName.setText("");
    }

    private void fillForm(Genre selectedGenre) {
        tfName.setText(selectedGenre.getName());
    }

    private boolean formValid() {
        lbNameError.setVisible(false);
        if (!tfName.getText().isBlank()) {
            return true;
        }
        if (tfName.getText().isBlank()) {
            lbNameError.setVisible(true);
        }
        return false;
    }
}
